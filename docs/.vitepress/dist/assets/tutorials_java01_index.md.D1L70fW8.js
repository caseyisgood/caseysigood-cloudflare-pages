import{_ as t,c as o,o as a,ae as n}from"./chunks/framework.Dh1jimFm.js";const m=JSON.parse('{"title":"Preface","description":"","frontmatter":{"prev":false,"next":{"text":"Chapter1 - Introduction","link":"/tutorials/java01/chapter01/"}},"headers":[],"relativePath":"tutorials/java01/index.md","filePath":"tutorials/java01/index.md"}'),i={name:"tutorials/java01/index.md"};function r(s,e,u,l,h,c){return a(),o("div",null,e[0]||(e[0]=[n('<h1 id="preface" tabindex="-1">Preface <a class="header-anchor" href="#preface" aria-label="Permalink to &quot;Preface&quot;">​</a></h1><p>&quot;Why can&#39;t I understand anything in class?&quot; &quot;How do you actually learn programming?&quot; &quot;Why do I grasp everything the teacher explains, yet feel completely lost when writing code myself?&quot; &quot;I can comprehend others&#39; code, but I&#39;d never think to write it that way myself?&quot;</p><p>When helping others learn programming, I’m often asked these questions. There are many similar questions, but their root cause is the same: Knowing ≠ Being able to use. Many fall into the same misconception: believing that merely knowing a concept means they’ve mastered it.</p><p>Yet, reality disagrees.</p><p>Learning programming is like learning to write: acquiring a new concept is like learning a new word. But writing well isn’t about who knows the most words: only elementary students compete that way. Yet, you can’t know too few, or you’ll lack the words to express yourself.</p><p>Chinese writer Yu Hua once said: &quot;I don’t know many Chinese characters, but enough, I think, to write fiction.&quot;</p><blockquote><p>&quot;Later critics praised my writing for its simplicity— only because my vocabulary was small.&quot;</p><p>——<strong>Yu Hua</strong></p></blockquote><p>The same applies to programming.</p><p>Its essence isn’t memorizing syntax, but how to compose &quot;sentences&quot; from &quot;words,&quot; weaving them into &quot;essays&quot; that solve real problems. Beginners often swing between extremes: obsessively memorizing syntax without practice, or rushing ahead without mastering basics. Thus, I use writing as a metaphor to teach this lesson: balance &quot;lexical richness&quot; with &quot;narrative skill,&quot; depth with breadth.</p><p>This is why our tutorial adopts a language-acquisition framework: treating Java as a special language to &quot;talk with&quot; computers. When your audience shifts from humans to machines, &quot;clarity&quot; becomes &quot;rigorous logic,&quot; and &quot;eloquence&quot; transforms into &quot;elegant architecture.&quot; This is as well the core methodology of <em>Java Programming: From Words to Works</em>—we must not only recognize programming’s &quot;characters,&quot; but also craft &quot;essays&quot; that solve problems.</p><p>Beyond confusion, many learners feel a sense of meaninglessness—typing mechanically, unsure of their actions, doubting their aptitude. This stems from overemphasizing &quot;how&quot; in teaching while neglecting the &quot;why.&quot; But when learning, we should ask: What’s our goal? What can current knowledge achieve? How does new knowledge help? Only then do we grasp its purpose and wield it effectively. As German philosopher Nietzsche noted, one who has a &quot;why&quot; can bear almost any &quot;how.&quot;</p><blockquote><p>&quot;He who has a why to live for can bear almost any how.&quot;</p><p>——<strong>Friedrich Nietzsche</strong></p></blockquote><p>This textbook prioritizes the &quot;why before how&quot; principle. For instance, when introducing <em>methods</em>, we’ll first explore solving problems without them, making their necessity tangible. Similarly, <em>arrays</em> will debut through experiencing their absence.</p><blockquote><p>&quot;What I cannot create, I do not understand.&quot;</p><p>——<strong>Richard Feynman</strong></p></blockquote><p>Programming mastery grows not linearly, but through debugging iterations and project-based reinforcement. May this guide deepen your Java understanding and propel you forward on your coding journey.</p><p><strong>Wang Kaixin</strong> May 21, 2025 at Wenzhou-Kean University, Zhejiang, China</p>',16)]))}const g=t(i,[["render",r]]);export{m as __pageData,g as default};
